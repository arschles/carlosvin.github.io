<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Vin's Blog</title><link>http://carlosvin.github.io/</link><description>Web personal de Carlos Martín Sánchez: Cuento lo que pasa por la web o por mi cabeza.</description><language>es</language><lastBuildDate>Wed, 11 Jun 2014 11:16:22 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Distintas formas de serialización en Java: Comparación de rendimiento</title><link>http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;Hace poco, he tenido que serializar/deserializar unos datos en &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt;, hacía mucho que no lo hacía en formato binario directamente (ultimamente he utilizado &lt;a class="reference external" href="http://www.json.org/"&gt;JSON&lt;/a&gt; o &lt;a class="reference external" href="http://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt;). Recordaba haber serializado objetos implementando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;, pero había visto por Internet otra forma implementando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt;, ¿cuál interfaz utilizo? Pues depende lo que quieras y necesites, como todo.&lt;/p&gt;
&lt;div class="contents topic" id="cuando-utilizar-serializable-o-externalizable"&gt;
&lt;p class="topic-title first"&gt;Cuándo utilizar Serializable o Externalizable&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#serializable" id="id3"&gt;Serializable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#externalizable" id="id4"&gt;Externalizable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#pruebas-de-rendimiento-serializable-vs-externalizable" id="id5"&gt;Pruebas de Rendimiento (Serializable vs Externalizable)&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-serializable" id="id6"&gt;Utilizando el interfaz Serializable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-externalizable-mal" id="id7"&gt;Utilizando el interfaz Externalizable (mal)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-externalizable-bien" id="id8"&gt;Utilizando el interfaz Externalizable (bien)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#analizando-los-resultados" id="id9"&gt;Analizando los resultados&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html"&gt;Leer más…&lt;/a&gt; (restan 3 minutos)&lt;/p&gt;</description><category>Java</category><guid>http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html</guid><pubDate>Tue, 13 May 2014 15:00:00 GMT</pubDate></item><item><title>Mutex C++</title><link>http://carlosvin.github.io/posts/cpp-mutex.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;En &lt;a class="reference external" href="http://es.wikipedia.org/wiki/C%2B%2B11"&gt;C++11&lt;/a&gt; se han introducido muchas mejoras que nos ayudan a desarrollar sistemas multi-hilo. Voy a centrarme en los &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Exclusi%C3%B3n_mutua_(inform%C3%A1tica)"&gt;mutex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En las versiones anteriores a &lt;a class="reference external" href="http://es.wikipedia.org/wiki/C%2B%2B11"&gt;C++11&lt;/a&gt; una forma de obtener un &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Exclusi%C3%B3n_mutua_(inform%C3%A1tica)"&gt;mutex&lt;/a&gt; es el que nos proporciona la librería &lt;a class="reference external" href="http://en.wikipedia.org/wiki/POSIX_Threads"&gt;pthread&lt;/a&gt;, pero para utilizarlo debíabos inicializarlo y destruirlo en estilo &lt;a class="reference external" href="http://es.wikipedia.org/wiki/C_(lenguaje_de_programaci%C3%B3n)"&gt;C&lt;/a&gt;, en definitiva, tienes que hacer algo más que lock/unlock cada vez que trabajas con un mutex.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://es.wikipedia.org/wiki/C%2B%2B11"&gt;C++11&lt;/a&gt; nos proporciona una &lt;a class="reference external" href="http://es.cppreference.com/w/cpp/thread/mutex"&gt;clase mutex&lt;/a&gt;, que nos abstrae de cosas que no son lock/unclock. Os recomiendo que echéis un vistazo y veáis lo limpio que queda el código: &lt;a class="reference external" href="http://es.cppreference.com/w/cpp/thread/mutex"&gt;Clase mutex de C++11&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si sigues trabajando con &lt;a class="reference external" href="http://clang.llvm.org/cxx_status.html"&gt;versiones de compiladores previos a C++11&lt;/a&gt;, hace tiempo me hice un wrapper que te ayuda a abstraerte del mutex de pthread, lo dejo aquí abajo por si a alguien le resulta útil.&lt;/p&gt;
&lt;p&gt;Abajo está un &lt;a class="reference external" href="https://gist.github.com/carlosvin/11257689"&gt;Gist del Código&lt;/a&gt;, he vuelto a escribir el código de cabeza y puede ser que haya algún error, lo revisaré, pero lo importante es la idea de hacer una clase que envuelva la inicialización del mutex de pthread.&lt;/p&gt;
&lt;script src="https://gist.github.com/11257689.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre class="literal-block"&gt;
#include "Mutex.h"
#include &amp;lt;exception&amp;gt;


Mutex::Mutex()
{
    if ( pthread_mutex_init(&amp;amp;_mutex, NULL) )
    {
        throw "Error: Initializing _mutex";
    }
}

Mutex::~Mutex()
{

    pthread_mutex_destroy(&amp;amp;_mutex);
}

Mutex::Mutex(const Mutex &amp;amp; obj)
{
	_mutex = obj._mutex;
}

Mutex &amp;amp; Mutex::operator=(const Mutex &amp;amp; obj)
{
	_mutex = obj._mutex;
	return *this;
}

bool Mutex::operator==(const Mutex &amp;amp; obj)
{
	return _mutex == obj._mutex;
}

bool Mutex::operator!=(const Mutex &amp;amp; obj)
{
	return !(*this == obj);
}

void Mutex::lock ()
{
    pthread_mutex_lock( &amp;amp;_mutex );
}

void Mutex::unlock ()
{
    pthread_mutex_unlock( &amp;amp;_mutex );
}

void Mutex::lock ( int lock, Mutex * mtx)
{
	if (lock)
	{
		mtx-&amp;gt;lock();
	}
	else
	{
		mtx-&amp;gt;unlock();
	}
}


&lt;/pre&gt;
&lt;/noscript&gt;</description><category>C++</category><category>pthread</category><guid>http://carlosvin.github.io/posts/cpp-mutex.html</guid><pubDate>Thu, 24 Apr 2014 15:50:00 GMT</pubDate></item><item><title>Python asyncio: Qué, Cómo, Cúando</title><link>http://carlosvin.github.io/posts/async-what-how-when.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;He estado escuchando una charla de &lt;a class="reference external" href="http://emptysqua.re/blog/"&gt;A. Jesse Jiryu Davis&lt;/a&gt; sobre la librería &lt;a class="reference external" href="https://docs.python.org/3.4/library/asyncio.html"&gt;asycnio&lt;/a&gt; de &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se trata de una librería introducida en la versión 3.4 de &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt; que da soporte a programación concurrente sobre un solo hilo, lo cual supone un ahorro muy importante de memoria.&lt;/p&gt;
&lt;p&gt;En la charla nos cuenta qué es, cómo funciona, cuándo utilizarlo y cuándo no.&lt;/p&gt;
&lt;iframe width="425" height="344" src="//www.youtube.com/embed/9WV7juNmyE8?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;</description><category>Programming</category><category>Python</category><guid>http://carlosvin.github.io/posts/async-what-how-when.html</guid><pubDate>Sun, 20 Apr 2014 11:35:00 GMT</pubDate></item><item><title>Ecuaciones que han cambiado el Mundo</title><link>http://carlosvin.github.io/posts/equations-that-changed-the-word.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;He visto en &lt;a class="reference external" href="https://plus.google.com/+GoogleScienceFair"&gt;Google Science Fair&lt;/a&gt; una colección de ecuaciones que han cambiado el mundo.
En mi opinión, comprender algunas de estas ecuaciones debería entrar en lo que llamamos "Cultura General".&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://plus.google.com/108818810955465968635/posts/MQ6e6NXNGTf"&gt;&lt;img alt="Ecuaciones que cambiaron el mundo" class="align-center" src="https://lh4.googleusercontent.com/-FHTLwqgD_9Y/Uzw9gQoOzWI/AAAAAAAAzPo/wYMfpR33uqM/w319-h417-no/10013908_458548124276223_2085950828_n.jpg" style="width: 400px;"&gt;&lt;/a&gt;</description><category>G+</category><category>Math</category><category>Pysics</category><category>Science</category><guid>http://carlosvin.github.io/posts/equations-that-changed-the-word.html</guid><pubDate>Thu, 03 Apr 2014 09:30:00 GMT</pubDate></item><item><title>Primer Post utilizando Nikola</title><link>http://carlosvin.github.io/posts/primer-post.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;Supongo que, como la mayoría, vengo del concepto de software de gestión de blogs o gestores de contenidos dinámicos, basados en:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;enviar información desde un navegador a un servidor&lt;/li&gt;
&lt;li&gt;procesar y almacenar la información en una base de datos o en ficheros&lt;/li&gt;
&lt;li&gt;el servidor genera una respuesta dinámicamente que se envía al navegador en forma de HTML&lt;ul&gt;&lt;li&gt;para generar esta respuesta se suele leer de la base de datos o de los ficheros&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;De todo este proceso se encarga un software instalado en el servidor, nuestro gestor de contenidos.&lt;/p&gt;
&lt;p&gt;Ahora he cambiado al paradigma de "generador de sitios web estáticos", en concreto voy a utilizar &lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;, aunque esta vez no lo voy a instalar en ningún servidor.
En otro post os contaré cómo he montado esto con &lt;a class="reference external" href="http://www.github.com"&gt;Github&lt;/a&gt; &lt;a class="footnote-reference" href="http://carlosvin.github.io/posts/primer-post.html#id5" id="id1"&gt;[1]&lt;/a&gt; y &lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis&lt;/a&gt; &lt;a class="footnote-reference" href="http://carlosvin.github.io/posts/primer-post.html#id6" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mi camino para llegar hasta los generadores de sitios web estáticos ha pasado por las etapas que os cuento abajo (me he saltado alguna menos importante).&lt;/p&gt;
&lt;div class="contents topic" id="camino-hasta-nikola"&gt;
&lt;p class="topic-title first"&gt;Camino hasta &lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/primer-post.html#phpnuke" id="id14"&gt;PhpNuke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/primer-post.html#mi-propio-gestor-de-contenidos" id="id15"&gt;Mi propio gestor de contenidos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/primer-post.html#drupal" id="id16"&gt;Drupal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/primer-post.html#wordpress" id="id17"&gt;Wordpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/primer-post.html#cmsdj" id="id18"&gt;CMSdj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/primer-post.html#nikola" id="id19"&gt;Nikola&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="phpnuke"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://www.phpnuke.org/"&gt;PhpNuke&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sí, sigue existiendo. Aquí entramos un gestor de contenido basado PHP+MySQL, multi-idioma, gestión de usuarios, grupos de usuarios, ampliable con temas, plugins, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mi-propio-gestor-de-contenidos"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/posts/primer-post.html#id15"&gt;Mi propio gestor de contenidos&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Que no era tal, porque se quedó en un blog en el que podía publicar contenidos dinámicamente, también hecho en PHP y MySQL. Me sirvió para:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Publicar posts con problemas.&lt;/li&gt;
&lt;li&gt;Darme cuenta de que un programador necesita a un diseñador.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.php.net/"&gt;PHP&lt;/a&gt; a nivel sintáctico, es feo (cuestión de gustos).&lt;/li&gt;
&lt;li&gt;Empezar a entender la importancia de &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Don't_repeat_yourself"&gt;DRY&lt;/a&gt; &lt;a class="footnote-reference" href="http://carlosvin.github.io/posts/primer-post.html#id7" id="id3"&gt;[3]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="drupal"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://drupal.org/"&gt;Drupal&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Un gestor de contenidos muy completo, que me gustó mucho, hasta que se empezaron a "romper" cosas (comparto culpa con &lt;a class="reference external" href="https://drupal.org/"&gt;Drupal&lt;/a&gt;) y me cansé. Pero quiero remarcar que tiene todo lo que yo podía esperar de un gestor de contenidos y más.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wordpress"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://wordpress.org/"&gt;Wordpress&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ya no voy a entrar en si es mejor o peor que &lt;a class="reference external" href="https://drupal.org/"&gt;Drupal&lt;/a&gt;, que de eso hay mucho por Internet. Simplemente es mucho más usable y fácil de actualizar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cmsdj"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://bitbucket.org/carlosvin/cmsdj"&gt;CMSdj&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mi segundo intento de creación de mi propio gestor de contenidos. Tenía una idea en la cabeza, de cómo debería ser un diseño del modelo de un gestor de contenidos, todavía la tengo. Y recientemente había descubierto &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, un framework que me encantó hecho con un lenguaje que me encanta, &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt;, ¿quién se puede resistir ahora a crear su propio CMS &lt;a class="footnote-reference" href="http://carlosvin.github.io/posts/primer-post.html#id8" id="id4"&gt;[4]&lt;/a&gt;?
&lt;a class="reference external" href="https://bitbucket.org/carlosvin/cmsdj"&gt;CMSdj&lt;/a&gt; está por ahí en &lt;a class="reference external" href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt; y funciona, tiene su propio buscador, gestión de templates, sistema de comentarios, sistema de votación, acercamiento a &lt;a class="reference external" href="http://www.w3.org/html/"&gt;HTML5&lt;/a&gt; + &lt;a class="reference external" href="http://www.w3.org/Style/CSS/current-work"&gt;CSS3&lt;/a&gt; y algunas cosillas más, pero:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Ya no sacaba tiempo para desarrollar, un par de horas a la semana, como mucho, y gastaba una hora en recordar por donde iba.&lt;/li&gt;
&lt;li&gt;Seguía necesitando un diseñador.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Así que declaré este proyecto muerto por aburrimiento, aunque seguí utilizándolo para publicar mis cosillas, pero cada vez que iba a escribir algo en mi blog y veía todo a medio hacer, me ponía malo, así que decidí cerrar y empezar de nuevo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nikola"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tengo que decir que quería un generador de sitios estáticos, porque están de moda y toda la gente escribe sobre sus bondades y me convencieron. Probé &lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; para que no me lo contaran, que es el más famoso. Pero prefería uno hecho en &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt; por si quería meter mano alguna vez. Así que después de buscar un poco, me quedé entre &lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;, &lt;a class="reference external" href="http://mynt.mirroredwhite.com/"&gt;Mynt&lt;/a&gt; y &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;. Me quedé con &lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;  por descarte:
* &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; me dió algunos problemas en la utilización de varios idiomas y en las categorías, aunque de primeras fue el que más me convenció. De hecho, es posible que esos problemas los crease yo, pero no quería gastar mucho tiempo en investigar.
* &lt;a class="reference external" href="http://mynt.mirroredwhite.com/"&gt;Mynt&lt;/a&gt; me encantó por su sencillez, aunque tienes que hacerte tus propios templates y no quiero darme cuenta otra vez de lo que necesito a un diseñador.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/posts/primer-post.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;En &lt;a class="reference external" href="http://www.github.com"&gt;Github&lt;/a&gt; alojo el sitio generado, toda la parte estática (las páginas en HTML, imágenes, etc.)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/posts/primer-post.html#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis&lt;/a&gt; es un software the integración contínua (como &lt;a class="reference external" href="http://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt;), yo lo utilizo para automatizar el despliegue del sitio, esto es, para descargar el sitio cada vez que lo cambie en &lt;a class="reference external" href="http://www.github.com"&gt;Github&lt;/a&gt;, volver a generarlo y publicarlo otra vez.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/posts/primer-post.html#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Don't Repeat Yourself (En español, "no te repitas")&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/posts/primer-post.html#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Content Management System ("Sistema de gestión de contenidos")&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><category>Python</category><category>Static Sites</category><guid>http://carlosvin.github.io/posts/primer-post.html</guid><pubDate>Thu, 27 Mar 2014 12:30:02 GMT</pubDate></item><item><title>Android Studio Portable Download</title><link>http://carlosvin.github.io/posts/android-studio-portable-download.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;Para quien quiera utilizar &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio.html"&gt;Android Studio&lt;/a&gt; sin instalarlo, como un programa "portable", aquí os dejo el enlace a la &lt;a class="reference external" href="http://tools.android.com/download/studio/canary/latest"&gt;última versión de Android Studio&lt;/a&gt;.&lt;/p&gt;</description><category>Android</category><category>Java</category><guid>http://carlosvin.github.io/posts/android-studio-portable-download.html</guid><pubDate>Sun, 20 Oct 2013 11:00:00 GMT</pubDate></item><item><title>Depurar librería generada con libtool</title><link>http://carlosvin.github.io/posts/debug-libtool-lib.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;Trabajando con &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt; &lt;a class="footnote-reference" href="http://carlosvin.github.io/posts/debug-libtool-lib.html#id3" id="id1"&gt;[1]&lt;/a&gt;, cuando vamos a depurar un ejecutable que utiliza una librería generada con &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt;, es posible que nos encontremos con el siguiente error:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;gdb ./tests-mylib
&lt;span class="s2"&gt;"tests-mylib"&lt;/span&gt;: not in executable format: File format not recognized
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;libmylib.so&lt;/code&gt; es una librería dinámica generada con &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt;
&lt;code&gt;tests-mylib&lt;/code&gt; es un ejecutable que utiliza la librería mylib&lt;/p&gt;
&lt;p&gt;Para los que estéis pensando que se me ha olvidado poner la opción de compilación &lt;code&gt;-g&lt;/code&gt;, lo siento, pero este error ocurre aunque utilicemos &lt;code&gt;-g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El error es debido a que estamos intentando ejecutar un script generado por &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt;, es una envoltura sobre el programa real, para facilitar la ejecución de éste &lt;a class="citation-reference" href="http://carlosvin.github.io/posts/debug-libtool-lib.html#libtooldoc" id="id2"&gt;[libtooldoc]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para poder depurar nuestro programa de prueba &lt;code&gt;tests-mylib&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
libtool --mode&lt;span class="o"&gt;=&lt;/span&gt;execute gdb tests-mylib
&lt;/pre&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/posts/debug-libtool-lib.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Herramienta que pertenece a la &lt;a class="reference external" href="http://es.wikipedia.org/wiki/GNU_build_system"&gt;Autotools&lt;/a&gt; usada para crear bibliotecas de software portables.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils citation" frame="void" id="libtooldoc" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/posts/debug-libtool-lib.html#id2"&gt;[libtooldoc]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Esta información la he sacado de &lt;a class="reference external" href="http://www.gnu.org/software/libtool/manual/libtool.html#Debugging-executables"&gt;http://www.gnu.org/software/libtool/manual/libtool.html#Debugging-executables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description><category>Autotools</category><category>C++</category><category>GNU</category><category>Tips and Tricks</category><guid>http://carlosvin.github.io/posts/debug-libtool-lib.html</guid><pubDate>Fri, 01 Feb 2013 14:30:00 GMT</pubDate></item><item><title>Mapeo de un struct C++ en Memoria</title><link>http://carlosvin.github.io/posts/cpp-pragma-pack.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;Un struct de C++ es un elemento que permite agrupar elementos de tipos distintos con alguna relación entre ellos. Esto permite manipular todos los elementos en bloque mediante una única referencia.&lt;/p&gt;
&lt;p&gt;Si alguna vez nos interesa trabajar a un nivel más bajo, nos puede resultar útil entender cómo se mapea una estructura en memoria y cómo controlar este mapeo.&lt;/p&gt;
&lt;div class="contents topic" id="tabla-de-contenidos"&gt;
&lt;p class="topic-title first"&gt;Tabla de Contenidos&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/cpp-pragma-pack.html#estructura-de-ejemplo" id="id1"&gt;Estructura de ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/cpp-pragma-pack.html#la-directiva-pragma-pack-en-struct-c" id="id2"&gt;La directiva #pragma pack en struct C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/cpp-pragma-pack.html#rendimiento" id="id3"&gt;Rendimiento&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="estructura-de-ejemplo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/posts/cpp-pragma-pack.html#id1"&gt;Estructura de ejemplo&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Esta estructura estará compuesta por dos campos, un entero (4 bytes) y un booleano (un byte). En C++ queda de la siguiente forma:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStruct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Si hacemos un &lt;code&gt;sizeof&lt;/code&gt; de la una instancia de la estructura deberíamos obtener un tamaño de 5 bytes. Y la memoria quedaría de la siguiente forma:&lt;/p&gt;
&lt;div class="figure" style="width: 50%"&gt;
&lt;img alt="/galleries/c-mem-struct/5b.png" src="http://carlosvin.github.io/galleries/c-mem-struct/5b.png" style="width: 30%;"&gt;&lt;p class="caption"&gt;Estructura de 5 bytes que realmente ocupa 5 bytes en memoria.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Pero no es tan sencillo, a continuación veremos que no nos podemos olvidar de la alineación de la memoria que hace el compilador en ese sistema y veremos cómo controlarlo para no encontrarnos con tamaños inesperados, ya que esto depende del compilador del sistema.&lt;/p&gt;
&lt;p&gt;Por ejemplo, si en mi máquina hago un &lt;code&gt;sizeof&lt;/code&gt; de la estructura, obtengo un tamaño de 8 bytes. Lo que está sucediendo es que el compilador reserva más memoria al final de la estructura para que cuadre en bloques de 2n bytes. La memoria queda de la siguiente forma:&lt;/p&gt;
&lt;div class="figure" style="width: 50%"&gt;
&lt;img alt="/galleries/c-mem-struct/8b.png" src="http://carlosvin.github.io/galleries/c-mem-struct/8b.png" style="width: 30%;"&gt;&lt;p class="caption"&gt;Estructura de 5 bytes que realmente ocupa 8 bytes en memoria. Para ser más precisos, debería haber dibujado la memoria no usada a continuación del atributo flag.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Vamos a ver un fragmento de código que imprime el tamaño de la estructura y el de cada uno de sus atributos y verificar, en este caso 4 + 1 no es 5.&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="cp"&gt;#include  &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStruct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz_flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz_timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;flag: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sz_flag&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" Bytes"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;+"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;timeout: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sz_timeout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" Bytes"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;="&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sz_timeout&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sz_flag&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" Bytes"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"sizeof struct:  "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" Bytes"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"SampleStruct"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStruct&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStruct&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStruct&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" -- "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/c7deb3df49bebd40"&gt;Ejecutando el código de sin la directiva pragma&lt;/a&gt;, tenemos que nuestra estructura ocupa 8 bytes en lugar de 5 bytes.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
SampleStruct
flag: 1 Bytes
+
timeout: 4 &lt;span class="nv"&gt;Bytes&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;
5 Bytes
sizeof struct:  8 Bytes
--
&lt;/pre&gt;
&lt;div class="tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Si queremos conocer el tamaño exacto de las estructuras que vamos a utilizar, tenemos que especificar al compilador la forma de alinear la estructura en memoria, para ello utilizaremos la directiva &lt;code&gt;#pragma pack(n)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="la-directiva-pragma-pack-en-struct-c"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/posts/cpp-pragma-pack.html#id2"&gt;La directiva #pragma pack en struct C++&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Se trata de una directiva del preprocesador que indica al compilador cómo debe realizar la alineación de la memoria. Vamos a ver como se comporta con un ejemplo:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz_flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz_timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" flag: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sz_flag&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" Bytes"&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" +"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" timeout: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sz_timeout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Bytes"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" ="&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sz_timeout&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sz_flag&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Bytes"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" sizeof struct:  "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" Bytes"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#pragma pack (1)
&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStructPack1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack(0)
&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack (2)
&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStructPack2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack(0)
&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack (4)
&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStructPack4&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack(0)
&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStruct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"SampleStructPack1"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStructPack1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStructPack1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStructPack1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" -- "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"SampleStructPack2"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStructPack2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStructPack2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStructPack2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"SampleStructPack4"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStructPack4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStructPack4&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStructPack4&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"SampleStruct"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStruct&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStruct&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SampleStruct&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" -- "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/7c18ee6585e57366"&gt;Ejecutando el código de con las directivas pragma&lt;/a&gt;, tenemos distintos resultados dependiendo del valor de pragma.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
SampleStructPack1
 flag: 1 Bytes
 +
 timeout: &lt;span class="nv"&gt;4Bytes&lt;/span&gt;
 &lt;span class="o"&gt;=&lt;/span&gt;
 5Bytes
 sizeof struct:  5 Bytes
 --

SampleStructPack2
 flag: 1 Bytes
 +
 timeout: &lt;span class="nv"&gt;4Bytes&lt;/span&gt;
 &lt;span class="o"&gt;=&lt;/span&gt;
 5Bytes
 sizeof struct:  6 Bytes

SampleStructPack4
 flag: 1 Bytes
 +
 timeout: &lt;span class="nv"&gt;4Bytes&lt;/span&gt;
 &lt;span class="o"&gt;=&lt;/span&gt;
 5Bytes
 sizeof struct:  8 Bytes

SampleStruct
 flag: 1 Bytes
 +
 timeout: &lt;span class="nv"&gt;4Bytes&lt;/span&gt;
 &lt;span class="o"&gt;=&lt;/span&gt;
 5Bytes
 sizeof struct:  8 Bytes
 --
&lt;/pre&gt;
&lt;p&gt;Veamos caso por caso:&lt;/p&gt;
&lt;dl class="docutils"&gt;&lt;dt&gt;SampleStructPack1 &lt;code&gt;#pragma pack (1)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Reserva bloques de memoria de un byte, nuestra estructura se ha ajustado perfectamente; en este caso sí que &lt;code&gt;4 + 1 = 5&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;SampleStructPack2 &lt;code&gt;#pragma pack (2)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Ahora el mínimo tamaño del bloque de memoria es de 2 bytes. Para el entero, hay un ajuste exacto porque necesita 2 bloques que 2 bytes para alojar sus 4 bytes.
Para el caso del booleano, necesita un bloque de 1 byte, pero como mínimo tiene que asignar un bloque de 2 bytes, por eso en total reserva 6 bytes, &lt;code&gt;4 + 2 = 6&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;SampleStructPack4 &lt;code&gt;#pragma pack (4)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Es el mismo caso que el anterior, aunque  en el caso del booleano, hay un mayor "desperdicio" de memoria. Necesita 1 byte, pero reserva 4 bytes que es tamaño mínimo de bloque de memoria que puede asignar el compilador.&lt;/dd&gt;
&lt;dt&gt;SampleStruct (alineación por defecto del compilador)&lt;/dt&gt;
&lt;dd&gt;Como vemos se comporta exactamente igual que &lt;code&gt;#pragma pack (4)&lt;/code&gt;, podemos deducir que la alineación por defecto del compilador que estamos utilizando es de 4 bytes.&lt;/dd&gt;
&lt;/dl&gt;&lt;div class="important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;¿Por qué no utilizamos siempre la alineación de memoria más ajustada (&lt;code&gt;#pragma pack (1)&lt;/code&gt;) para aprovechar mejor la memoria?&lt;/p&gt;
&lt;div class="warning last"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;Porque perderemos rendimiento.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rendimiento"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/posts/cpp-pragma-pack.html#id3"&gt;Rendimiento&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Vamos a hacer una prueba simple de rendimiento, en la que se va a reservar el mismo número de elementos en arrays para cada tipo de estructura.&lt;/p&gt;
&lt;p&gt;Este es el resultado:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
SampleStructPack1: 500000000000000000 bytes allocated in 94311 nanoseconds
SampleStructPack2: 600000000000000000 bytes allocated in 1777 nanoseconds
SampleStructPack4: 800000000000000000 bytes allocated in 1519 nanoseconds
&lt;/pre&gt;
&lt;p&gt;Como vemos cuanto más ajustada es la alineación de memoria, más tiempo se tarda en reservar y liberar. Puedes &lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/954ad542659c7591"&gt;ejecutar la prueba de rendimiento en este enlace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A continuación pego el código de la prueba de rendimiento.&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack (1)
&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStructPack1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack(0)
&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack (2)
&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStructPack2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack(0)
&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack (4)
&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStructPack4&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="cp"&gt;#pragma pack(0)
&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStruct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;MAX_ELEMENTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100000000000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;chrono&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;allocate1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SampleStructPack1&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_ELEMENTS&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"SampleStructPack1: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" bytes allocated"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;allocate2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SampleStructPack2&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_ELEMENTS&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"SampleStructPack2: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" bytes allocated"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;allocate4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SampleStructPack4&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_ELEMENTS&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"SampleStructPack4: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" bytes allocated"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;chrono1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;allocate1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" in "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;duration_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" nanoseconds"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;chrono2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;allocate2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" in "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;duration_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" nanoseconds"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;chrono4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;allocate4&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" in "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;duration_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;nanoseconds&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high_resolution_clock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" nanoseconds"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;chrono1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;chrono2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;chrono4&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;</description><category>C++</category><guid>http://carlosvin.github.io/posts/cpp-pragma-pack.html</guid><pubDate>Mon, 26 Nov 2012 11:00:00 GMT</pubDate></item><item><title>Configuración de proxy para Git</title><link>http://carlosvin.github.io/posts/git-proxy-config.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;Es muy tedioso trabajar desde una red con proxy, al menos para mí, pierdo un montón de tiempo configurando software para que se actualice y funcione correctamente.&lt;/p&gt;
&lt;p&gt;Vamos a ver cómo configurar git para que utilice un proxy determinado.&lt;/p&gt;
&lt;p&gt;Esta es una descripción más o menos genérica de como hacer que git utilice un proxy determinado:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;#para http
&lt;/span&gt;git config --global http.proxy &amp;lt;protocolo&amp;gt;://&amp;lt;nombre de usuario&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;direccion_ip&amp;gt;:&amp;lt;puerto&amp;gt;

&lt;span class="c"&gt;#para https
&lt;/span&gt;git config --global https.proxy &amp;lt;protocolo&amp;gt;://&amp;lt;nombre de usuario&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;direccion_ip&amp;gt;:&amp;lt;puerto&amp;gt;

&lt;span class="c"&gt;#para deshabilitar el uso del proxy
&lt;/span&gt;git config --global --unset http.proxy
&lt;/pre&gt;
&lt;p&gt;Más información en &lt;a class="reference external" href="http://git-scm.com/book/es/Personalizando-Git-Configuraci%C3%B3n-de-Git"&gt;la configuración oficial de Git&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils citation" frame="void" id="protocolo" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;[protocolo]&lt;/td&gt;&lt;td&gt;Suele ser http o https&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description><category>Git</category><category>Proxy</category><category>Tips and Tricks</category><guid>http://carlosvin.github.io/posts/git-proxy-config.html</guid><pubDate>Thu, 15 Nov 2012 11:00:00 GMT</pubDate></item><item><title>Eliminar/Reemplazar signos de puntuación en Python</title><link>http://carlosvin.github.io/posts/remove-replace-punctuation-py.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;A continuación muestro una forma de eliminar los signos de puntuación de una cadena de caractéres en Python. Los signos de puntuación son reemplazados por caractéres en blanco.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_punctuation&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;]'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;punctuation&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ejecutando:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; remove_punctuation &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"El perro, de San Roque, no tiene rabo; ni nunca lo ha tenido."&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'El perro  de San Roque  no tiene rabo  ni nunca lo ha tenido '&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Si queremos hacer la función más general, para reemplazar los signos de puntuación por cualquier otra cadena, simplemente hay que hacer la siguiente modificación en la función.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replace_punctuation&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;]'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;punctuation&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ejecutando el código de arriba:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; replace_punctuation &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"El perro, de San Roque, no tiene rabo; ni nunca lo ha tenido."&lt;/span&gt;, &lt;span class="s1"&gt;'[stop]'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'El perro[stop] de San Roque[stop] no tiene rabo[stop] ni nunca lo ha tenido[stop]'&lt;/span&gt;
&lt;/pre&gt;</description><category>Python</category><category>Tips and Tricks</category><guid>http://carlosvin.github.io/posts/remove-replace-punctuation-py.html</guid><pubDate>Tue, 23 Oct 2012 13:00:00 GMT</pubDate></item></channel></rss>