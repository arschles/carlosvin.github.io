<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Vin's Blog (Java)</title><link>http://carlosvin.github.io/</link><description></description><language>es</language><lastBuildDate>Sat, 07 Jun 2014 18:58:32 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Distintas formas de serialización en Java: Comparación de rendimiento</title><link>http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;Hace poco, he tenido que serializar/deserializar unos datos en &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt;, hacía mucho que no lo hacía en formato binario directamente (ultimamente he utilizado &lt;a class="reference external" href="http://www.json.org/"&gt;JSON&lt;/a&gt; o &lt;a class="reference external" href="http://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt;). Recordaba haber serializado objetos implementando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;, pero había visto por Internet otra forma implementando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt;, ¿cuál interfaz utilizo? Pues depende lo que quieras y necesites, como todo.&lt;/p&gt;
&lt;div class="contents topic" id="cuando-utilizar-serializable-o-externalizable"&gt;
&lt;p class="topic-title first"&gt;Cuándo utilizar Serializable o Externalizable&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#serializable" id="id3"&gt;Serializable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#externalizable" id="id4"&gt;Externalizable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#pruebas-de-rendimiento-serializable-vs-externalizable" id="id5"&gt;Pruebas de Rendimiento (Serializable vs Externalizable)&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-serializable" id="id6"&gt;Utilizando el interfaz Serializable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-externalizable-mal" id="id7"&gt;Utilizando el interfaz Externalizable (mal)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-externalizable-bien" id="id8"&gt;Utilizando el interfaz Externalizable (bien)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#analizando-los-resultados" id="id9"&gt;Analizando los resultados&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="serializable"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Cuando quieras serializar algo programando poco, es la forma fácil.&lt;/li&gt;
&lt;li&gt;Pero tiene algunas restricciones: El objeto a serializar debe implementar el constructor por defecto. Debe hacerse responsable de los atributos no accesibles de la clase padre.&lt;/li&gt;
&lt;li&gt;Cuando no te importe mucho el rendimiento, como veremos en la sección &lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#pruebas-de-rendimiento-serializable-vs-externalizable"&gt;Pruebas de Rendimiento (Serializable vs Externalizable)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="externalizable"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Vas a tener que implementar tú mismo los métodos de serialización.&lt;/li&gt;
&lt;li&gt;Cuando no puedas utilizar &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cuando quieras obtener un mejor rendimiento, como veremos en la sección &lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#pruebas-de-rendimiento-serializable-vs-externalizable"&gt;Pruebas de Rendimiento (Serializable vs Externalizable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Si tienes que encargarte de la serialización de los atributos de la clase padre, te recomiendo utilizar &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt;, porque evitamos una sobrescritura extraña de métodos privados.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class="code java literal-block"&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectOutputStream&lt;/span&gt; &lt;span class="n"&gt;oos&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;readObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectInputStream&lt;/span&gt; &lt;span class="n"&gt;ois&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pruebas-de-rendimiento-serializable-vs-externalizable"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#id5"&gt;Pruebas de Rendimiento (Serializable vs Externalizable)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;El interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt; utilizando la introspección de &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt;, adivina los tipos de los atributos de las clases que va a serializar/deserializar, pero esta "magia" tiene una penalización en el rendimiento.&lt;/p&gt;
&lt;p&gt;Al utilizar el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; somos nosotros los que decidimos como serializar/deserializar los objetos, es decir, tenemos que escribir nosotros el código que hace esto. Hemos perdido comodidad, pero evitamos que &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; haga algunas tareas y, si sobrescribimos correctamente los métodos del interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt;, conseguiremos una mejora de rendimiento.&lt;/p&gt;
&lt;p&gt;Para saber cuánto es la diferencia de rendimiento, he escrito un &lt;cite&gt;pequeño ejemplo en el que se serializa un objeto con dos colecciones con 100000 emails y 100000 teléfonos&lt;/cite&gt;. He contemplado 3 casos:&lt;/p&gt;
&lt;div class="section" id="utilizando-el-interfaz-serializable"&gt;
&lt;h3&gt;Utilizando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Como dijimos más arriba, utilizando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt; &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; tiene que adivinar ciertas cosas, en este proceso sacrifica algo de rendimiento (es el que más tarda), a cambio ĺo único que tenemos que hacer es que nuestra clase implemente el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code java literal-block"&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Contacts&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Serializable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;&lt;li&gt;1133 milisegundos en serializar&lt;/li&gt;
&lt;li&gt;506  milisegundos en deserializar&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="utilizando-el-interfaz-externalizable-mal"&gt;
&lt;h3&gt;Utilizando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; (mal)&lt;/h3&gt;
&lt;p&gt;En este caso somos nosotros los encargados de "decir" a &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; cómo debe serializar/deserializar, pero debemos ser cuidadosos, de lo contrario podemos quedarnos con lo peor de los dos mundos, por ejemplo: Si simplemente serializamos/deserializamos los atributos de la clase, y estos son atributos complejos (como colecciones), &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; también tiene que adivinar bastantes cosas y también sacrificamos algo de rendimiento y además hemos tenido que escribir más código.&lt;/p&gt;
&lt;pre class="code java literal-block"&gt;
&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;readExternal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectInput&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ClassNotFoundException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;setEmails&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readObject&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;setPhones&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readObject&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeExternal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectOutput&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;&lt;li&gt;737 milisegundos en serializar&lt;/li&gt;
&lt;li&gt;367 milisegundos en deserializar&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="utilizando-el-interfaz-externalizable-bien"&gt;
&lt;h3&gt;Utilizando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; (bien)&lt;/h3&gt;
&lt;p&gt;Si serializamos/deserializamos uno por uno los elementos de las colecciones, ahorramos aún más tiempo, porque &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; está serializando tipos más simples (en este caso java.lang.String).&lt;/p&gt;
&lt;pre class="code java literal-block"&gt;
&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;readExternal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectInput&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ClassNotFoundException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nEmails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nEmails&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readUTF&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nPhones&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nPhones&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readUTF&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeExternal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectOutput&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeUTF&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeUTF&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;&lt;li&gt;204 milisegundos en serializar&lt;/li&gt;
&lt;li&gt;92  milisegundos en deserializar&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Hemos ganado rendimiento a costa de escribir un poco más de código.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="analizando-los-resultados"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#id9"&gt;Analizando los resultados&lt;/a&gt;&lt;/h3&gt;
&lt;div class="caution"&gt;
&lt;p class="first admonition-title"&gt;Caution!&lt;/p&gt;
&lt;p class="last"&gt;Por el hecho de utilizar un interfaz u otro, no ganamos rendimiento.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Ganamos rendimiento porque el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; nos "obliga" a implementar parte de la serialización y quitamos esta carga a &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Aunque como hemos visto en &lt;a class="reference internal" href="http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-externalizable-bien"&gt;Utilizando el interfaz Externalizable (bien)&lt;/a&gt;, si no tenemos cuidado, conseguiremos una mejora muy pequeña.&lt;/p&gt;
&lt;p&gt;A continuación podéis ver un &lt;a class="reference external" href="https://docs.google.com/spreadsheets/d/1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8/gviz/chartiframe?oid=2110613848"&gt;gráfico&lt;/a&gt; con los resultados de los tests.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Gráfico con los resultados" src="https://docs.google.com/spreadsheets/d/1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8/embed/oimg?id=1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8&amp;amp;oid=2110613848&amp;amp;zx=t87gu6ve3lan" style="width: 80%;"&gt;&lt;p class="caption"&gt;Abrir el &lt;a class="reference external" href="https://docs.google.com/spreadsheets/d/1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8/gviz/chartiframe?oid=2110613848"&gt;gráfico&lt;/a&gt; interactivo | &lt;a class="reference external" href="https://docs.google.com/spreadsheets/d/1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8/embed/oimg?id=1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8&amp;amp;oid=2110613848&amp;amp;zx=t87gu6ve3lan"&gt;Abrir imágen&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A continuación os dejo los enlaces a:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://carlosvin.github.io/serializations-performance-java/reports/tests/classes/com.diky.contacts.SerializationTest.html"&gt;Resultados de los tests&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/carlosvin/serializations-performance-java/"&gt;Código en github&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Estado de la &lt;a class="reference external" href="https://travis-ci.org/carlosvin/serializations-performance-java"&gt;Construcción en travis&lt;/a&gt;&lt;/p&gt;
&lt;img alt="https://travis-ci.org/carlosvin/serializations-performance-java.svg?branch=master" src="https://travis-ci.org/carlosvin/serializations-performance-java.svg?branch=master"&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;</description><category>Java</category><guid>http://carlosvin.github.io/posts/serialization-java-serializable-externalizable.html</guid><pubDate>Tue, 13 May 2014 15:00:00 GMT</pubDate></item><item><title>Android Studio Portable Download</title><link>http://carlosvin.github.io/posts/android-studio-portable-download.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;Para quien quiera utilizar &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio.html"&gt;Android Studio&lt;/a&gt; sin instalarlo, como un programa "portable", aquí os dejo el enlace a la &lt;a class="reference external" href="http://tools.android.com/download/studio/canary/latest"&gt;última versión de Android Studio&lt;/a&gt;.&lt;/p&gt;</description><category>Android</category><category>Java</category><guid>http://carlosvin.github.io/posts/android-studio-portable-download.html</guid><pubDate>Sun, 20 Oct 2013 11:00:00 GMT</pubDate></item></channel></rss>