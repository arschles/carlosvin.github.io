<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Vin's Blog (Java)</title><link>http://carlosvin.github.io/</link><description></description><language>en</language><lastBuildDate>Mon, 19 May 2014 22:29:48 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Java serialization ways: Performance Comparison</title><link>http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;Recently I've  had to serialize/deserialize some data in &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; binary format. Lately I use &lt;a class="reference external" href="http://www.json.org/"&gt;JSON&lt;/a&gt; or &lt;a class="reference external" href="http://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt; formats.&lt;/p&gt;
&lt;p&gt;I remember that to serialize &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; objects they must implement the  &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt; interface, but I had also read in Internet other way, implementing the &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; interface, then, which interface must I implement? It depends on what you want such as everything in the life.&lt;/p&gt;
&lt;div class="contents topic" id="when-to-use-serializable-or-externalizable"&gt;
&lt;p class="topic-title first"&gt;When to use &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt; or &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#serializable" id="id3"&gt;Serializable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#externalizable" id="id4"&gt;Externalizable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#preformance-tests-serializable-vs-externalizable" id="id5"&gt;Preformance tests (Serializable vs Externalizable)&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-serializable" id="id6"&gt;Utilizando el interfaz Serializable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-externalizable-mal" id="id7"&gt;Utilizando el interfaz Externalizable (mal)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-externalizable-bien" id="id8"&gt;Utilizando el interfaz Externalizable (bien)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#analizando-los-resultados" id="id9"&gt;Analizando los resultados&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="serializable"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;&lt;li&gt;To serialize easily. You have to write less code.&lt;/li&gt;
&lt;li&gt;This way has some restrictions: The object to serialize must implement the default constructor (0 args). It must be responsible to manage the parent class attributes.&lt;/li&gt;
&lt;li&gt;The performance is not as important, we will see more about that in &lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#preformance-tests-serializable-vs-externalizable"&gt;Preformance tests (Serializable vs Externalizable)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="externalizable"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;&lt;li&gt;You must implement the serialization/deserialization methods, so you have to write more code.&lt;/li&gt;
&lt;li&gt;When you cannot use &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When you want to improve (tunning) the performance, as we'll see in &lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#preformance-tests-serializable-vs-externalizable"&gt;Preformance tests (Serializable vs Externalizable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you have to manage the serialization of parent class attributes, then I recommend you use &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt;, because we'll avoid a weird overriding of private methods.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class="code java literal-block"&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectOutputStream&lt;/span&gt; &lt;span class="n"&gt;oos&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;readObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectInputStream&lt;/span&gt; &lt;span class="n"&gt;ois&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="preformance-tests-serializable-vs-externalizable"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#id5"&gt;Preformance tests (Serializable vs Externalizable)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;: Java through introspection, it guess the types of class attributes to know how to serialize/deserialize them, but this "magic" is not free, it has a performance penalty.&lt;/p&gt;
&lt;p&gt;When we use &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; interface, we decide how to serialize/deserialize, namely we have to write the code that does it. We've lost ease, but also we avoid that &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; does some tasks, so if we override the methods properly, we'll get a performance improvement.&lt;/p&gt;
&lt;p&gt;To know how much is the performance difference between both interfaces, I've written a &lt;a class="reference external" href="http://carlosvin.github.io/serializations-performance-java/"&gt;tiny example in which we serialize an object with 2 collections with 100000 elements each one&lt;/a&gt;, 3 cases:&lt;/p&gt;
&lt;p&gt;TODO: Translation pending-&amp;gt;&lt;/p&gt;
&lt;div class="section" id="utilizando-el-interfaz-serializable"&gt;
&lt;h3&gt;Utilizando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Como dijimos más arriba, utilizando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt; &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; tiene que adivinar ciertas cosas, en este proceso sacrifica algo de rendimiento (es el que más tarda), a cambio ĺo único que tenemos que hacer es que nuestra clase implemente el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code java literal-block"&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Contacts&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Serializable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;&lt;li&gt;1133 milisegundos en serializar&lt;/li&gt;
&lt;li&gt;506  milisegundos en deserializar&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="utilizando-el-interfaz-externalizable-mal"&gt;
&lt;h3&gt;Utilizando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; (mal)&lt;/h3&gt;
&lt;p&gt;En este caso somos nosotros los encargados de "decir" a &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; cómo debe serializar/deserializar, pero debemos ser cuidadosos, de lo contrario podemos quedarnos con lo peor de los dos mundos, por ejemplo: Si simplemente serializamos/deserializamos los atributos de la clase, y estos son atributos complejos (como colecciones), &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; también tiene que adivinar bastantes cosas y también sacrificamos algo de rendimiento y además hemos tenido que escribir más código.&lt;/p&gt;
&lt;pre class="code java literal-block"&gt;
&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;readExternal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectInput&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ClassNotFoundException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;setEmails&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readObject&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;setPhones&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readObject&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeExternal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectOutput&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;&lt;li&gt;737 milisegundos en serializar&lt;/li&gt;
&lt;li&gt;367 milisegundos en deserializar&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="utilizando-el-interfaz-externalizable-bien"&gt;
&lt;h3&gt;Utilizando el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; (bien)&lt;/h3&gt;
&lt;p&gt;Si serializamos/deserializamos uno por uno los elementos de las colecciones, ahorramos aún más tiempo, porque &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; está serializando tipos más simples (en este caso java.lang.String).&lt;/p&gt;
&lt;pre class="code java literal-block"&gt;
&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;readExternal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectInput&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ClassNotFoundException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nEmails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nEmails&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readUTF&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nPhones&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nPhones&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readUTF&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeExternal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObjectOutput&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeUTF&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;phones&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeUTF&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;&lt;li&gt;204 milisegundos en serializar&lt;/li&gt;
&lt;li&gt;92  milisegundos en deserializar&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Hemos ganado rendimiento a costa de escribir un poco más de código.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="analizando-los-resultados"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#id9"&gt;Analizando los resultados&lt;/a&gt;&lt;/h3&gt;
&lt;div class="caution"&gt;
&lt;p class="first admonition-title"&gt;Caution!&lt;/p&gt;
&lt;p class="last"&gt;Por el hecho de utilizar un interfaz u otro, no ganamos rendimiento.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Ganamos rendimiento porque el interfaz &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; nos "obliga" a implementar parte de la serialización y quitamos esta carga a &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Aunque como hemos visto en &lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#utilizando-el-interfaz-externalizable-bien"&gt;Utilizando el interfaz Externalizable (bien)&lt;/a&gt;, si no tenemos cuidado, conseguiremos una mejora muy pequeña.&lt;/p&gt;
&lt;p&gt;A continuación podéis ver un &lt;a class="reference external" href="https://docs.google.com/spreadsheets/d/1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8/gviz/chartiframe?oid=2110613848"&gt;gráfico&lt;/a&gt; con los resultados de los tests.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Gráfico con los resultados" src="https://docs.google.com/spreadsheets/d/1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8/embed/oimg?id=1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8&amp;amp;oid=2110613848&amp;amp;zx=t87gu6ve3lan" style="width: 80%;"&gt;&lt;p class="caption"&gt;Abrir el &lt;a class="reference external" href="https://docs.google.com/spreadsheets/d/1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8/gviz/chartiframe?oid=2110613848"&gt;gráfico&lt;/a&gt; interactivo | &lt;a class="reference external" href="https://docs.google.com/spreadsheets/d/1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8/embed/oimg?id=1V9p6shPMpSr7RcaTruXpj_0ZQUpVjMFdeh7AnObaBL8&amp;amp;oid=2110613848&amp;amp;zx=t87gu6ve3lan"&gt;Abrir imágen&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A continuación os dejo los enlaces a:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://carlosvin.github.io/serializations-performance-java/reports/tests/classes/com.diky.contacts.SerializationTest.html"&gt;Resultados de los tests&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/carlosvin/serializations-performance-java/"&gt;Código en github&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Estado de la &lt;a class="reference external" href="https://travis-ci.org/carlosvin/serializations-performance-java"&gt;Construcción en travis&lt;/a&gt;&lt;/p&gt;
&lt;img alt="https://travis-ci.org/carlosvin/serializations-performance-java.svg?branch=master" src="https://travis-ci.org/carlosvin/serializations-performance-java.svg?branch=master"&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;</description><category>Java</category><guid>http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html</guid><pubDate>Tue, 13 May 2014 15:00:00 GMT</pubDate></item><item><title>Android Studio Portable Download</title><link>http://carlosvin.github.io/en/posts/android-studio-portable-download.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;If you want to use &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio.html"&gt;Android Studio&lt;/a&gt; without installation, as a portable software, here you have the link to &lt;a class="reference external" href="http://tools.android.com/download/studio/canary/latest"&gt;last portable version of Android Studio&lt;/a&gt;.&lt;/p&gt;</description><category>Android</category><category>Java</category><guid>http://carlosvin.github.io/en/posts/android-studio-portable-download.html</guid><pubDate>Sun, 20 Oct 2013 11:00:00 GMT</pubDate></item></channel></rss>